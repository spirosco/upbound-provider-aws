/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/spirosco/upbound-provider-aws/apis/firehose/v1beta1"
	v1beta12 "github.com/spirosco/upbound-provider-aws/apis/iam/v1beta1"
	v1beta1 "github.com/spirosco/upbound-provider-aws/apis/sns/v1beta1"
	common "github.com/spirosco/upbound-provider-aws/config/common"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CompositeAlarm.
func (mg *CompositeAlarm) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.AlarmActions),
		Extract:       resource.ExtractParamPath("arn", true),
		References:    mg.Spec.ForProvider.AlarmActionsRefs,
		Selector:      mg.Spec.ForProvider.AlarmActionsSelector,
		To: reference.To{
			List:    &v1beta1.TopicList{},
			Managed: &v1beta1.Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AlarmActions")
	}
	mg.Spec.ForProvider.AlarmActions = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.AlarmActionsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.OkActions),
		Extract:       resource.ExtractParamPath("arn", true),
		References:    mg.Spec.ForProvider.OkActionsRefs,
		Selector:      mg.Spec.ForProvider.OkActionsSelector,
		To: reference.To{
			List:    &v1beta1.TopicList{},
			Managed: &v1beta1.Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OkActions")
	}
	mg.Spec.ForProvider.OkActions = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.OkActionsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MetricStream.
func (mg *MetricStream) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirehoseArn),
		Extract:      resource.ExtractParamPath("arn", false),
		Reference:    mg.Spec.ForProvider.FirehoseArnRef,
		Selector:     mg.Spec.ForProvider.FirehoseArnSelector,
		To: reference.To{
			List:    &v1beta11.DeliveryStreamList{},
			Managed: &v1beta11.DeliveryStream{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirehoseArn")
	}
	mg.Spec.ForProvider.FirehoseArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirehoseArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.RoleArnRef,
		Selector:     mg.Spec.ForProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1beta12.RoleList{},
			Managed: &v1beta12.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}
