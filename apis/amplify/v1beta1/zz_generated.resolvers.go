/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/spirosco/upbound-provider-aws/apis/iam/v1beta1"
	common "github.com/spirosco/upbound-provider-aws/config/common"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this App.
func (mg *App) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IAMServiceRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.IAMServiceRoleArnRef,
		Selector:     mg.Spec.ForProvider.IAMServiceRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IAMServiceRoleArn")
	}
	mg.Spec.ForProvider.IAMServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IAMServiceRoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendEnvironment.
func (mg *BackendEnvironment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AppIDRef,
		Selector:     mg.Spec.ForProvider.AppIDSelector,
		To: reference.To{
			List:    &AppList{},
			Managed: &App{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppID")
	}
	mg.Spec.ForProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Branch.
func (mg *Branch) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AppIDRef,
		Selector:     mg.Spec.ForProvider.AppIDSelector,
		To: reference.To{
			List:    &AppList{},
			Managed: &App{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppID")
	}
	mg.Spec.ForProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Webhook.
func (mg *Webhook) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AppIDRef,
		Selector:     mg.Spec.ForProvider.AppIDSelector,
		To: reference.To{
			List:    &AppList{},
			Managed: &App{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppID")
	}
	mg.Spec.ForProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BranchName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.BranchNameRef,
		Selector:     mg.Spec.ForProvider.BranchNameSelector,
		To: reference.To{
			List:    &BranchList{},
			Managed: &Branch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BranchName")
	}
	mg.Spec.ForProvider.BranchName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BranchNameRef = rsp.ResolvedReference

	return nil
}
