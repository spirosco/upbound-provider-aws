/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta12 "github.com/spirosco/upbound-provider-aws/apis/acm/v1beta1"
	v1beta13 "github.com/spirosco/upbound-provider-aws/apis/elbv2/v1beta1"
	v1beta1 "github.com/spirosco/upbound-provider-aws/apis/iam/v1beta1"
	v1beta11 "github.com/spirosco/upbound-provider-aws/apis/lambda/v1beta1"
	common "github.com/spirosco/upbound-provider-aws/config/common"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Account.
func (mg *Account) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudwatchRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.CloudwatchRoleArnRef,
		Selector:     mg.Spec.ForProvider.CloudwatchRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudwatchRoleArn")
	}
	mg.Spec.ForProvider.CloudwatchRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudwatchRoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Authorizer.
func (mg *Authorizer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizerCredentials),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.AuthorizerCredentialsRef,
		Selector:     mg.Spec.ForProvider.AuthorizerCredentialsSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizerCredentials")
	}
	mg.Spec.ForProvider.AuthorizerCredentials = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizerCredentialsRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizerURI),
		Extract:      resource.ExtractParamPath("invoke_arn", true),
		Reference:    mg.Spec.ForProvider.AuthorizerURIRef,
		Selector:     mg.Spec.ForProvider.AuthorizerURISelector,
		To: reference.To{
			List:    &v1beta11.FunctionList{},
			Managed: &v1beta11.Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizerURI")
	}
	mg.Spec.ForProvider.AuthorizerURI = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizerURIRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BasePathMapping.
func (mg *BasePathMapping) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.APIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.APIIDRef,
		Selector:     mg.Spec.ForProvider.APIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainName),
		Extract:      resource.ExtractParamPath("domain_name", false),
		Reference:    mg.Spec.ForProvider.DomainNameRef,
		Selector:     mg.Spec.ForProvider.DomainNameSelector,
		To: reference.To{
			List:    &DomainNameList{},
			Managed: &DomainName{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainName")
	}
	mg.Spec.ForProvider.DomainName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StageName),
		Extract:      resource.ExtractParamPath("stage_name", false),
		Reference:    mg.Spec.ForProvider.StageNameRef,
		Selector:     mg.Spec.ForProvider.StageNameSelector,
		To: reference.To{
			List:    &StageList{},
			Managed: &Stage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StageName")
	}
	mg.Spec.ForProvider.StageName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StageNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Deployment.
func (mg *Deployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DocumentationPart.
func (mg *DocumentationPart) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DocumentationVersion.
func (mg *DocumentationVersion) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DomainName.
func (mg *DomainName) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CertificateArn),
		Extract:      resource.ExtractParamPath("certificate_arn", false),
		Reference:    mg.Spec.ForProvider.CertificateArnRef,
		Selector:     mg.Spec.ForProvider.CertificateArnSelector,
		To: reference.To{
			List:    &v1beta12.CertificateValidationList{},
			Managed: &v1beta12.CertificateValidation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CertificateArn")
	}
	mg.Spec.ForProvider.CertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CertificateArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RegionalCertificateArn),
		Extract:      resource.ExtractParamPath("certificate_arn", false),
		Reference:    mg.Spec.ForProvider.RegionalCertificateArnRef,
		Selector:     mg.Spec.ForProvider.RegionalCertificateArnSelector,
		To: reference.To{
			List:    &v1beta12.CertificateValidationList{},
			Managed: &v1beta12.CertificateValidation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RegionalCertificateArn")
	}
	mg.Spec.ForProvider.RegionalCertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionalCertificateArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayResponse.
func (mg *GatewayResponse) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Integration.
func (mg *Integration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ConnectionIDRef,
		Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &VPCLinkList{},
			Managed: &VPCLink{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPMethod),
		Extract:      resource.ExtractParamPath("http_method", false),
		Reference:    mg.Spec.ForProvider.HTTPMethodRef,
		Selector:     mg.Spec.ForProvider.HTTPMethodSelector,
		To: reference.To{
			List:    &MethodList{},
			Managed: &Method{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HTTPMethod")
	}
	mg.Spec.ForProvider.HTTPMethod = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HTTPMethodRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &ResourceList{},
			Managed: &Resource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URI),
		Extract:      resource.ExtractParamPath("invoke_arn", true),
		Reference:    mg.Spec.ForProvider.URIRef,
		Selector:     mg.Spec.ForProvider.URISelector,
		To: reference.To{
			List:    &v1beta11.FunctionList{},
			Managed: &v1beta11.Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URI")
	}
	mg.Spec.ForProvider.URI = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URIRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationResponse.
func (mg *IntegrationResponse) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPMethod),
		Extract:      resource.ExtractParamPath("http_method", false),
		Reference:    mg.Spec.ForProvider.HTTPMethodRef,
		Selector:     mg.Spec.ForProvider.HTTPMethodSelector,
		To: reference.To{
			List:    &MethodList{},
			Managed: &Method{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HTTPMethod")
	}
	mg.Spec.ForProvider.HTTPMethod = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HTTPMethodRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &ResourceList{},
			Managed: &Resource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StatusCode),
		Extract:      resource.ExtractParamPath("status_code", false),
		Reference:    mg.Spec.ForProvider.StatusCodeRef,
		Selector:     mg.Spec.ForProvider.StatusCodeSelector,
		To: reference.To{
			List:    &MethodResponseList{},
			Managed: &MethodResponse{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StatusCode")
	}
	mg.Spec.ForProvider.StatusCode = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StatusCodeRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Method.
func (mg *Method) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AuthorizerIDRef,
		Selector:     mg.Spec.ForProvider.AuthorizerIDSelector,
		To: reference.To{
			List:    &AuthorizerList{},
			Managed: &Authorizer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizerID")
	}
	mg.Spec.ForProvider.AuthorizerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &ResourceList{},
			Managed: &Resource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MethodResponse.
func (mg *MethodResponse) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPMethod),
		Extract:      resource.ExtractParamPath("http_method", false),
		Reference:    mg.Spec.ForProvider.HTTPMethodRef,
		Selector:     mg.Spec.ForProvider.HTTPMethodSelector,
		To: reference.To{
			List:    &MethodList{},
			Managed: &Method{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HTTPMethod")
	}
	mg.Spec.ForProvider.HTTPMethod = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HTTPMethodRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &ResourceList{},
			Managed: &Resource{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MethodSettings.
func (mg *MethodSettings) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StageName),
		Extract:      resource.ExtractParamPath("stage_name", false),
		Reference:    mg.Spec.ForProvider.StageNameRef,
		Selector:     mg.Spec.ForProvider.StageNameSelector,
		To: reference.To{
			List:    &StageList{},
			Managed: &Stage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StageName")
	}
	mg.Spec.ForProvider.StageName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StageNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Model.
func (mg *Model) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RequestValidator.
func (mg *RequestValidator) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Resource.
func (mg *Resource) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentID),
		Extract:      resource.ExtractParamPath("root_resource_id", true),
		Reference:    mg.Spec.ForProvider.ParentIDRef,
		Selector:     mg.Spec.ForProvider.ParentIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentID")
	}
	mg.Spec.ForProvider.ParentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RestAPIPolicy.
func (mg *RestAPIPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Stage.
func (mg *Stage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeploymentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DeploymentIDRef,
		Selector:     mg.Spec.ForProvider.DeploymentIDSelector,
		To: reference.To{
			List:    &DeploymentList{},
			Managed: &Deployment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeploymentID")
	}
	mg.Spec.ForProvider.DeploymentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeploymentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RestAPIID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RestAPIIDRef,
		Selector:     mg.Spec.ForProvider.RestAPIIDSelector,
		To: reference.To{
			List:    &RestAPIList{},
			Managed: &RestAPI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RestAPIID")
	}
	mg.Spec.ForProvider.RestAPIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RestAPIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UsagePlan.
func (mg *UsagePlan) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.APIStages); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.APIStages[i3].APIID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIStages[i3].APIIDRef,
			Selector:     mg.Spec.ForProvider.APIStages[i3].APIIDSelector,
			To: reference.To{
				List:    &RestAPIList{},
				Managed: &RestAPI{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.APIStages[i3].APIID")
		}
		mg.Spec.ForProvider.APIStages[i3].APIID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.APIStages[i3].APIIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.APIStages); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.APIStages[i3].Stage),
			Extract:      resource.ExtractParamPath("stage_name", false),
			Reference:    mg.Spec.ForProvider.APIStages[i3].StageRef,
			Selector:     mg.Spec.ForProvider.APIStages[i3].StageSelector,
			To: reference.To{
				List:    &StageList{},
				Managed: &Stage{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.APIStages[i3].Stage")
		}
		mg.Spec.ForProvider.APIStages[i3].Stage = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.APIStages[i3].StageRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this UsagePlanKey.
func (mg *UsagePlanKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.KeyIDRef,
		Selector:     mg.Spec.ForProvider.KeyIDSelector,
		To: reference.To{
			List:    &APIKeyList{},
			Managed: &APIKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyID")
	}
	mg.Spec.ForProvider.KeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UsagePlanID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.UsagePlanIDRef,
		Selector:     mg.Spec.ForProvider.UsagePlanIDSelector,
		To: reference.To{
			List:    &UsagePlanList{},
			Managed: &UsagePlan{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UsagePlanID")
	}
	mg.Spec.ForProvider.UsagePlanID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsagePlanIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCLink.
func (mg *VPCLink) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetArns),
		Extract:       common.ARNExtractor(),
		References:    mg.Spec.ForProvider.TargetArnRefs,
		Selector:      mg.Spec.ForProvider.TargetArnSelector,
		To: reference.To{
			List:    &v1beta13.LBList{},
			Managed: &v1beta13.LB{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetArns")
	}
	mg.Spec.ForProvider.TargetArns = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetArnRefs = mrsp.ResolvedReferences

	return nil
}
